name: liquibase-rollback

on:
  push:
    branches:
      - main
    paths:
      - 'liquibase/changelog.xml'  # Trigger when changelog.xml changes
  workflow_dispatch:

jobs:
  liquibase-update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Liquibase
        run: |
          wget https://github.com/liquibase/liquibase/releases/download/v4.25.0/liquibase-4.25.0.zip
          unzip liquibase-4.25.0.zip -d /opt/liquibase
          chmod +x /opt/liquibase/liquibase


      - name: Test DB Connection
        run: nc -zv 13.212.238.210 3306


      - name: Copy Liquibase Configuration Files
        run: |
          mkdir -p /opt/liquibase  
          cp $GITHUB_WORKSPACE/opt/liquibase/liquibase.properties /opt/liquibase/liquibase.properties
          cp $GITHUB_WORKSPACE/opt/liquibase/changelog.xml /opt/liquibase/changelog.xml
          ls -l /opt/liquibase  

          
      - name: Debug Liquibase Properties
        run: |
          ls -l /opt/liquibase/
          cat /opt/liquibase/liquibase.properties || echo "‚ö†Ô∏è liquibase.properties NOT FOUND!"

          
      - name: Run Liquibase STATUS
        run: |
          /opt/liquibase/liquibase --searchPath=/opt --defaults-file=/opt/liquibase/liquibase.properties status --changelog-file=liquibase/changelog.xml --log-level=debug

          
      - name: Add SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_KEY }}" > ~/.ssh/aws_key.pem
          chmod 600 ~/.ssh/aws_key.pem

      
      - name: Take a Database Backup Inside AWS Server
        run: |
          echo "üõ†Ô∏è Creating a backup before applying changes..."
          ssh -i ~/.ssh/aws_key.pem -o StrictHostKeyChecking=no ec2-user@13.212.238.210 << EOF
            mysqldump -u root -p"${{ secrets.MYSQL_PASSWORD }}" database2 > /home/ec2-user/BACKUP_PRE_UPDATE.sql
          EOF
          echo "‚úÖ Backup created successfully!"



      - name: Run Liquibase Update
        id: liquibase_update
        run: |
          echo "üîÑ Running Liquibase update..."
          set +e  # Allow script to continue even if an error occurs
          /opt/liquibase/liquibase --searchPath=/opt --defaults-file=/opt/liquibase/liquibase.properties update --changelog-file=liquibase/changelog.xml --log-level=debug
          echo "LIQUIBASE_EXIT_CODE=$?" >> $GITHUB_ENV  # Save exit code to GitHub Actions env variable
          set -e  # Enable failing for later steps


      - name: Tag Database Before Update
        run: |
            /opt/liquibase/liquibase --searchPath=/opt --defaults-file=/opt/liquibase/liquibase.properties tag "before_update"


      - name: Run Liquibase Rollback if Update Fails
        if: env.LIQUIBASE_EXIT_CODE != '0'  # Run only if Liquibase failed
        run: |
          echo "‚ö†Ô∏è Update failed! Rolling back changes..."
          /opt/liquibase/liquibase --searchPath=/opt --defaults-file=/opt/liquibase/liquibase.properties rollbackToTag before_update --changelog-file=liquibase/changelog.xml --log-level=debug   
          echo "‚úÖ Rollback completed!"


      - name: Print Success Message
        if: env.LIQUIBASE_EXIT_CODE == '0'  # Run only if Liquibase succeeded
        run: echo "‚úÖ Liquibase migration applied successfully!"
